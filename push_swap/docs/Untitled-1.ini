src/
├── push_swap.c
│   ├── static choose_algo() - Choix algorithme selon taille pile A
│   └── main() - non-static, entrée programme et init
├── core/
|	├── clean_stack.c
|	|	├── cleanup_and_exit() - non-static, Nettoyage mémoire et gestion sortie
|	|	└── free_stack() - non-static, free stack a or b
|	├── init_stack.c
|	|	└── init_stack() - non-static, init_stack - a or b
│   └── error.c
│       └── error_exit() - non-static, affiche erreur et code retour

├── operations/
│   ├── push_ops.c
│   │   ├── static push() - Déplace premier élément source vers dest
│   │   ├── pa() - non-static, push b->a avec affichage
│   │   └── pb() - non-static, push a->b avec affichage
│   ├── rotate_ops.c  
│   │   ├── static rotate() - Premier élément devient dernier
│   │   ├── ra() - non-static, rotate a avec affichage
│   │   ├── rb() - non-static, rotate b avec affichage  
│   │   └── rr() - non-static, ra+rb combinés
│   ├── reverse_rotate_ops.c
│   │   ├── static reverse_rotate() - Dernier élément devient premier
│   │   ├── rra() - non-static, reverse rotate a avec affichage
│   │   ├── rrb() - non-static, reverse rotate b avec affichage
│   │   └── rrr() - non-static, rra+rrb combinés
│   └── swap_ops.c
│       ├── static swap() - Échange deux premiers éléments
│       ├── sa() - non-static, swap a avec affichage
│       ├── sb() - non-static, swap b avec affichage
│       └── ss() - non-static, sa+sb combinés
|
├── parser/
│   ├── parsing_stack.c
│   │   ├── check_duplicate() - non-static, Vérifie les doublons dans la pile
│   │   └── add_to_stack() - non-static, Ajoute un élément à la pile
│   ├── parsing_utils.c
│   │   ├── handle_single_arg() - non-static, Gère un argument unique
│   │   ├── handle_split_arg() - non-static, Gère un argument splitté
│   │   └── is_valid_number() - non-static, Vérifie si une chaîne est un nombre valide
│   └── parsing.c
│       └── parse_args() - non-static, Parse les arguments d'entrée
|
├── sort/
│   ├── sort_big.c
│   │   ├── static push_optimal_to_b() - Push optimal chunks vers B
│   │   └── sort_big() - non-static, tri pile >5 éléments
│   ├── sort_three.c 
│   │   ├── static get_three_values() - Récupère valeurs à trier
│   │   └── sort_three() - non-static, tri 3 éléments avec 5 cas
│   ├── sort_four.c 
│   │   ├── static find_smallest() - Trouve plus petit élément
│   │   └── sort_four() - non-static, tri 4 éléments
│   └── sort_five.c
│       ├── static find_next_smallest() - Trouve second plus petit 
│       └── sort_five() - non-static, tri 5 éléments
|
├── utils/
│   ├── stack_utils.c
│   │   ├── init_stack() - non-static, alloue et initialise pile
│   │   ├── free_stack() - non-static, libère pile et noeuds
│   │   ├── is_sorted() - non-static, vérifie ordre croissant
│   │   └── get_min_max() - non-static, trouve bornes de la pile
│   ├── position_utils.c 
│   │   ├── find_position() - non-static, index d'une valeur dans pile
│   │   └── find_insert_position() - non-static, meilleure position insertion
│   └── cost_utils.c
      ├── calculate_cost() - non-static, coût rotation position
      ├── static update_cost() - Met à jour coûts move 
      └── get_best_move() - non-static, calcul mouvement optimal

